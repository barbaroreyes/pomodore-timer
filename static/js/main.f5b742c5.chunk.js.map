{"version":3,"sources":["logo.svg","pomodore/utils/class-names.js","pomodore/pomodore.js","pomodore/utils/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","Pomodoro","useState","isTimerRunning","setIsTimerRunning","focusUp","setFocusUp","breackUp","setbreackUp","data-testid","type","onClick","role","aria-label","title","prevState","oi","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5b742c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/**\r\n * Use this function to dynamically assign the className property of react components.\r\n *\r\n * Usage:\r\n *\r\n *  <span className={classNames({\r\n *               \"oi\": true,\r\n *               \"oi-media-play\": currentState.isPaused,\r\n *               'oi-media-pause': !currentState.isPaused\r\n *             })}/>\r\n *\r\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\r\n *\r\n * @param classNameToBoolean\r\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\r\n * @returns {string}\r\n *    a space delimited string of the class names which have a value of `true`.\r\n */\r\nexport default function classNames(classNameToBoolean) {\r\n    return Object.entries(classNameToBoolean)\r\n      .reduce(\r\n        (classes, [className, value]) =>\r\n          classes.concat(value ? className : undefined),\r\n        []\r\n      )\r\n      .filter((className) => className !== undefined)\r\n      .join(\" \");\r\n  }\r\n  \r\n  ","import React, { useState } from \"react\";\r\nimport classNames from \"./utils/class-names\";\r\nimport useInterval from \"./utils/useInterval\";\r\n\r\nfunction Pomodoro() {\r\n  // Timer starts out paused\r\n  const initialValue = 25\r\n  const initialValue1 = 5\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  const [focusUp,setFocusUp] = useState(initialValue)\r\n  const [breackUp,setbreackUp] = useState(5)\r\n\r\n  useInterval(\r\n    () => {\r\n      // ToDo: Implement what should happen when the timer is running\r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  function playPause() {\r\n    setIsTimerRunning((prevState) => !prevState);\r\n  }\r\n\r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n              {/* TODO: Update this text to display the current focus session duration */}\r\n              Focus Duration: 25:00\r\n            </span>\r\n            <div className=\"input-group-append\">\r\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"decrease-focus\"\r\n                onClick ={() => setFocusUp(focusUp  <= 5 ? 'sorry' : focusUp - 1)}\r\n              >\r\n                <span className=\"oi oi-minus\" />\r\n                down\r\n              </button>\r\n              <br/>\r\n              {focusUp}\r\n              <br/>\r\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-secondary\"\r\n                data-testid=\"increase-focus\"\r\n                onClick ={() => setFocusUp(focusUp >= 60 ? 'sorry' : focusUp + 1)}\r\n              >\r\n                <span className=\"oi oi-plus\" />\r\n               uP\r\n              </button>\r\n              <button onClick={()=>setFocusUp(initialValue ) }>reset</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col\">\r\n          <div className=\"float-right\">\r\n            <div className=\"input-group input-group-lg mb-2\">\r\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                {/* TODO: Update this text to display the current break session duration */}\r\n                Break Duration: 05:00\r\n              </span>\r\n              <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"decrease-break\"\r\n                  onClick={() => setbreackUp(breackUp <= 1 ? 'sorry':  breackUp -1 )}\r\n                >\r\n                  <span className=\"oi oi-minus\" />\r\n                  down\r\n                </button>\r\n                <br/>\r\n                {breackUp}\r\n                <br/>\r\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  data-testid=\"increase-break\"\r\n                  onClick={() => setbreackUp(breackUp < 15 ? breackUp +1 : 'sorry'   )}\r\n                >\r\n                  <span className=\"oi oi-plus\" />\r\n                  uP\r\n                </button>\r\n                <button onClick={()=>setbreackUp(initialValue1 )}>reset</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"btn-group btn-group-lg mb-2\"\r\n            role=\"group\"\r\n            aria-label=\"Timer controls\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-testid=\"play-pause\"\r\n              title=\"Start or pause timer\"\r\n              onClick={playPause}\r\n            >\r\n              <span\r\n                className={classNames({\r\n                  oi: true,\r\n                  \"oi-media-play\": !isTimerRunning,\r\n                  \"oi-media-pause\": isTimerRunning,\r\n                })}\r\n              />\r\n              Play\r\n            </button>\r\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              title=\"Stop the session\"\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n              Stop\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">Focusing for 25:00 minutes</h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              25:00 remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n\r\n","/**\r\n * Use this function to dynamically assign the className property of react components.\r\n *\r\n * Usage:\r\n *\r\n *  <span className={classNames({\r\n *               \"oi\": true,\r\n *               \"oi-media-play\": currentState.isPaused,\r\n *               'oi-media-pause': !currentState.isPaused\r\n *             })}/>\r\n *\r\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\r\n *\r\n * @param classNameToBoolean\r\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\r\n * @returns {string}\r\n *    a space delimited string of the class names which have a value of `true`.\r\n */\r\nexport default function classNames(classNameToBoolean) {\r\n    return Object.entries(classNameToBoolean)\r\n      .reduce(\r\n        (classes, [className, value]) =>\r\n          classes.concat(value ? className : undefined),\r\n        []\r\n      )\r\n      .filter((className) => className !== undefined)\r\n      .join(\" \");\r\n  }\r\n  \r\n  ","import logo from './logo.svg';\nimport './App.css';\nimport Pomodore from './pomodore/pomodore'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n         <Pomodore/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}