{"version":3,"sources":["logo.svg","utils/duration.js","pomodore/Duration.js","pomodore/Play.js","utils/class-names.js","pomodore/Timer.js","pomodore/pomodore.js","utils/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","secondsToDuration","givenSeconds","seconds","round","Duration","type","time","setTime","high","low","inSession","increment","focus","toLowerCase","handleClick","change","className","data-testid","onClick","Play","classNameToBoolean","isTimerRunning","playPause","resetSession","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Timer","focusTime","remainingTime","currentSession","breakTime","paused","percent","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","initialState","Focus","Break","remaining","running","useState","session","setSession","handleDurationChange","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","oldSession","Audio","process","play","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3706dee8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */\r\n\r\nexport function minutesToDuration(givenMinutes) {\r\n    const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\r\n    return `${minutes}:00`;\r\n  }\r\n  \r\n  /**\r\n   * Formats a number of seconds as 'mm:ss'.\r\n   *\r\n   * For example,\r\n   *    secondsToDuration(305) = '05:05'\r\n   *    secondsToDuration(930) = '15:30'\r\n   *\r\n   * @param givenSeconds\r\n   *    the number of seconds in the duration\r\n   * @returns {string}\r\n   *    the given seconds formatted as 'mm:ss'\r\n   */\r\n  \r\n  export function secondsToDuration(givenSeconds) {\r\n    const minutes = Math.floor((givenSeconds % 3600) / 60)\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    const seconds = Math.round(givenSeconds % 60)\r\n      .toString()\r\n      .padStart(2, \"0\");\r\n    return `${minutes}:${seconds}`;\r\n  }","import React from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Duration({ type, time, setTime, high, low, inSession, increment }) {\r\n  //line 6 is only for qualified testing purposes\r\n  const focus = type.toLowerCase();\r\n  const handleClick = (change) => {\r\n    if (!inSession) setTime(type, change);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"input-group input-group-lg mb-2\">\r\n        <span className=\"input-group-text\" data-testid={`duration-${focus}`}>\r\n          {/* TODO: Update this text to display the current focus session duration */}\r\n          {type} Duration: {minutesToDuration(time)}\r\n        </span>\r\n        <div className=\"input-group-append\">\r\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid={`decrease-${focus}`}\r\n            onClick={() => {\r\n              if (time > low) handleClick(-increment);\r\n            }}\r\n          >\r\n            <span className=\"oi oi-minus\" />\r\n            -\r\n          </button>\r\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid={`increase-${focus}`}\r\n            onClick={() => {\r\n              if (time < high) handleClick(increment);\r\n            }}\r\n          >\r\n            <span className=\"oi oi-plus\" />\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nDuration.propTypes = {\r\n  type: PropTypes.string,\r\n  time: PropTypes.number,\r\n  setTime: PropTypes.func,\r\n  high: PropTypes.number,\r\n  low: PropTypes.number,\r\n  inSession: PropTypes.bool,\r\n  increment: PropTypes.number,\r\n};\r\n\r\nexport default Duration;\r\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Play({ isTimerRunning, playPause, resetSession, inSession }) {\r\n  const handleReset = () => {\r\n    if (inSession) resetSession();\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n            Play\r\n          </button>\r\n          {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            title=\"Stop the session\"\r\n            onClick={handleReset}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n            Stop\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nPlay.propTypes = {\r\n  isTimerRunning: PropTypes.bool,\r\n  playPause: PropTypes.func,\r\n  resetSession: PropTypes.func,\r\n  inSession: PropTypes.bool,\r\n};\r\nexport default Play;\r\n\r\n","/**\r\n * Use this function to dynamically assign the className property of react components.\r\n *\r\n * Usage:\r\n *\r\n *  <span className={classNames({\r\n *               \"oi\": true,\r\n *               \"oi-media-play\": currentState.isPaused,\r\n *               'oi-media-pause': !currentState.isPaused\r\n *             })}/>\r\n *\r\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\r\n *\r\n * @param classNameToBoolean\r\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\r\n * @returns {string}\r\n *    a space delimited string of the class names which have a value of `true`.\r\n */\r\nexport default function classNames(classNameToBoolean) {\r\n    return Object.entries(classNameToBoolean)\r\n      .reduce(\r\n        (classes, [className, value]) =>\r\n          classes.concat(value ? className : undefined),\r\n        []\r\n      )\r\n      .filter((className) => className !== undefined)\r\n      .join(\" \");\r\n  }\r\n  \r\n  ","import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Timer({\r\n  focusTime,\r\n  remainingTime,\r\n  isTimerRunning,\r\n  inSession,\r\n  currentSession,\r\n  breakTime,\r\n}) {\r\n  const paused = isTimerRunning ? \"\" : \"PAUSED\";\r\n  const time = currentSession === \"On Break\" ? breakTime : focusTime;\r\n  const percent = ((time * 60 - remainingTime) / (time * 60)) * 100;\r\n\r\n  if (inSession) {\r\n    return (\r\n      <div>\r\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n              {currentSession} for {minutesToDuration(time)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below to include time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n              {secondsToDuration(remainingTime)} remaining\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <h2>{paused}</h2>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nTimer.propTypes = {\r\n  focusTime: PropTypes.number,\r\n  remainingTime: PropTypes.number,\r\n  isTimerRunning: PropTypes.bool,\r\n  currentSession: PropTypes.string,\r\n  breakTime: PropTypes.number,\r\n  inSession: PropTypes.bool,\r\n};\r\n\r\nexport default Timer;\r\n\r\n","import React, { useState } from \"react\";\r\n//import classNames from \"../utils/class-names\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport Duration from \"./Duration\";\r\nimport Play from \"./Play\";\r\nimport Timer from \"./Timer\";\r\n\r\nfunction Pomodoro() {\r\n  const initialState = {\r\n    Focus: 25,\r\n    Break: 5,\r\n    remaining: 1500,\r\n    running: false,\r\n    inSession: false,\r\n    currentSession: \"Focusing\",\r\n  };\r\n  // Timer starts out paused\r\n  const [session, setSession] = useState(initialState);\r\n\r\n  const handleDurationChange = (type, change) => {\r\n    setSession((currentSession) => ({\r\n      ...currentSession,\r\n      [type]: session[type] + change,\r\n    }));\r\n    if (type === \"Focus\") {\r\n      setSession((currentSession) => ({\r\n        ...currentSession,\r\n        remaining: currentSession.Focus * 60,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const resetSession = () => {\r\n    setSession(initialState);\r\n  };\r\n\r\n  useInterval(\r\n    () => {\r\n      // ToDo: Implement what should happen when the timer is running\r\n      setSession((oldSession) => {\r\n        return { ...oldSession, remaining: oldSession.remaining - 1 };\r\n      });\r\n      if (session.remaining <= 0) {\r\n        new Audio(\r\n          `${process.env.PUBLIC_URL}/alarm/Creepy-clock-chiming.mp3`\r\n        ).play();\r\n        setSession((oldSession) => {\r\n          if (oldSession.currentSession === \"Focusing\") {\r\n            return {\r\n              ...oldSession,\r\n              currentSession: \"On Break\",\r\n              remaining: session.Break * 60,\r\n            };\r\n          } else {\r\n            return {\r\n              ...oldSession,\r\n              currentSession: \"Focusing\",\r\n              remaining: session.Focus * 60,\r\n            };\r\n          }\r\n        });\r\n      }\r\n    },\r\n    session.running ? 1000 : null\r\n  );\r\n\r\n  function playPause() {\r\n    setSession({ ...session, running: !session.running, inSession: true });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"pomodoro\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Duration\r\n              type=\"Focus\"\r\n              time={session.Focus}\r\n              setTime={handleDurationChange}\r\n              high={60}\r\n              low={5}\r\n              inSession={session.inSession}\r\n              increment={5}\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <div className=\"float-right\">\r\n              <Duration\r\n                type=\"Break\"\r\n                time={session.Break}\r\n                setTime={handleDurationChange}\r\n                high={15}\r\n                low={1}\r\n                inSession={session.inSession}\r\n                increment={1}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Play\r\n            isTimerRunning={session.running}\r\n            playPause={playPause}\r\n            resetSession={resetSession}\r\n            inSession={session.inSession}\r\n          />\r\n        </div>\r\n        <Timer\r\n          focusTime={session.Focus}\r\n          breakTime={session.Break}\r\n          remainingTime={session.remaining}\r\n          isTimerRunning={session.running}\r\n          inSession={session.inSession}\r\n          currentSession={session.currentSession}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;","import { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n  ","import logo from './logo.svg';\nimport './App.css';\nimport Pomodore from './pomodore/pomodore'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n         <Pomodore/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}